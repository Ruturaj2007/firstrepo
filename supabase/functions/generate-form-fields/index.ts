import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { description } = await req.json();

    if (!description) {
      return new Response(JSON.stringify({ error: "Description input is required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
    if (!OPENAI_API_KEY) {
      return new Response(JSON.stringify({ error: "OPENAI_API_KEY not set in Supabase secrets." }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const prompt = `You are a form field generator. Based on the user's description, generate a JSON array of form field objects. Each object should conform to the following TypeScript interface:
\`\`\`typescript
export type FormFieldType =
  | "text"
  | "email"
  | "number"
  | "textarea"
  | "checkbox"
  | "select"
  | "radio"
  | "sentiment-text";

export interface FormField {
  name: string;
  label: string;
  type: FormFieldType;
  placeholder?: string;
  defaultValue?: any;
  required?: boolean;
  minLength?: number;
  maxLength?: number;
  pattern?: RegExp; // For custom regex validation
  options?: { label: string; value: string | number }[]; // For select and radio fields
  description?: string;
}
\`\`\`
For 'select' and 'radio' types, ensure 'options' is an array of { label: string; value: string | number }.
If the user asks for a field that would benefit from sentiment analysis (e.g., feedback, comments, review), use the 'sentiment-text' type.
Ensure 'name' is a camelCase string suitable for a form field identifier.
Respond with only the JSON array, no other text.

User description: "${description}"
`;

    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini", // Using a more capable model for generation
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: description },
        ],
        response_format: { type: "json_object" }, // Request JSON output
        temperature: 0.7, // Allow some creativity
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json();
      console.error("OpenAI API error:", errorData);
      return new Response(JSON.stringify({ error: errorData.error?.message || "Failed to generate form fields from OpenAI." }), {
        status: openaiResponse.status,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const data = await openaiResponse.json();
    const generatedContent = data.choices[0]?.message?.content;

    if (!generatedContent) {
      return new Response(JSON.stringify({ error: "No content generated by OpenAI." }), {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // OpenAI might wrap the JSON in a code block, try to extract it
    let jsonString = generatedContent;
    const jsonMatch = generatedContent.match(/```json\n([\s\S]*?)\n```/);
    if (jsonMatch && jsonMatch[1]) {
      jsonString = jsonMatch[1];
    }

    const fields = JSON.parse(jsonString);

    // Basic validation to ensure it's an array of objects
    if (!Array.isArray(fields) || !fields.every(item => typeof item === 'object' && item !== null)) {
      throw new Error("Generated content is not a valid JSON array of objects.");
    }

    return new Response(JSON.stringify({ fields }), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("Error in generate-form-fields function:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});